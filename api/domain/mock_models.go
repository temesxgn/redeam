// Code generated by MockGen. DO NOT EDIT.
// Source: entity_models.go

// Package domain is a generated GoMock package.
package domain

import (
	gomock "github.com/golang/mock/gomock"
	bson "go.mongodb.org/mongo-driver/bson"
	options "go.mongodb.org/mongo-driver/mongo/options"
	reflect "reflect"
)

// MockRepository is a mock of Repository interface
type MockRepository struct {
	ctrl     *gomock.Controller
	recorder *MockRepositoryMockRecorder
}

// MockRepositoryMockRecorder is the mock recorder for MockRepository
type MockRepositoryMockRecorder struct {
	mock *MockRepository
}

// NewMockRepository creates a new mock instance
func NewMockRepository(ctrl *gomock.Controller) *MockRepository {
	mock := &MockRepository{ctrl: ctrl}
	mock.recorder = &MockRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockRepository) EXPECT() *MockRepositoryMockRecorder {
	return m.recorder
}

// FindAll mocks base method
func (m *MockRepository) FindAll(filters bson.M, findOptions *options.FindOptions) (Books, *BookApiError) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindAll", filters, findOptions)
	ret0, _ := ret[0].(Books)
	ret1, _ := ret[1].(*BookApiError)
	return ret0, ret1
}

// FindAll indicates an expected call of FindAll
func (mr *MockRepositoryMockRecorder) FindAll(filters, findOptions interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindAll", reflect.TypeOf((*MockRepository)(nil).FindAll), filters, findOptions)
}

// FindOne mocks base method
func (m *MockRepository) FindOne(id string) (Book, *BookApiError) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindOne", id)
	ret0, _ := ret[0].(Book)
	ret1, _ := ret[1].(*BookApiError)
	return ret0, ret1
}

// FindOne indicates an expected call of FindOne
func (mr *MockRepositoryMockRecorder) FindOne(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindOne", reflect.TypeOf((*MockRepository)(nil).FindOne), id)
}

// Update mocks base method
func (m *MockRepository) Update(id string, fields bson.D) *BookApiError {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", id, fields)
	ret0, _ := ret[0].(*BookApiError)
	return ret0
}

// Update indicates an expected call of Update
func (mr *MockRepositoryMockRecorder) Update(id, fields interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockRepository)(nil).Update), id, fields)
}

// Delete mocks base method
func (m *MockRepository) Delete(id string) *BookApiError {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", id)
	ret0, _ := ret[0].(*BookApiError)
	return ret0
}

// Delete indicates an expected call of Delete
func (mr *MockRepositoryMockRecorder) Delete(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockRepository)(nil).Delete), id)
}

// IsExistingEntry mocks base method
func (m *MockRepository) IsExistingEntry(book Book) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsExistingEntry", book)
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsExistingEntry indicates an expected call of IsExistingEntry
func (mr *MockRepositoryMockRecorder) IsExistingEntry(book interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsExistingEntry", reflect.TypeOf((*MockRepository)(nil).IsExistingEntry), book)
}

// Save mocks base method
func (m *MockRepository) Save(book Book) (string, *BookApiError) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Save", book)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(*BookApiError)
	return ret0, ret1
}

// Save indicates an expected call of Save
func (mr *MockRepositoryMockRecorder) Save(book interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Save", reflect.TypeOf((*MockRepository)(nil).Save), book)
}

// MockService is a mock of Service interface
type MockService struct {
	ctrl     *gomock.Controller
	recorder *MockServiceMockRecorder
}

// MockServiceMockRecorder is the mock recorder for MockService
type MockServiceMockRecorder struct {
	mock *MockService
}

// NewMockService creates a new mock instance
func NewMockService(ctrl *gomock.Controller) *MockService {
	mock := &MockService{ctrl: ctrl}
	mock.recorder = &MockServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockService) EXPECT() *MockServiceMockRecorder {
	return m.recorder
}

// FindAll mocks base method
func (m *MockService) FindAll(filters bson.M, findOptions *options.FindOptions) (Books, *BookApiError) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindAll", filters, findOptions)
	ret0, _ := ret[0].(Books)
	ret1, _ := ret[1].(*BookApiError)
	return ret0, ret1
}

// FindAll indicates an expected call of FindAll
func (mr *MockServiceMockRecorder) FindAll(filters, findOptions interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindAll", reflect.TypeOf((*MockService)(nil).FindAll), filters, findOptions)
}

// FindOne mocks base method
func (m *MockService) FindOne(id string) (Book, *BookApiError) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindOne", id)
	ret0, _ := ret[0].(Book)
	ret1, _ := ret[1].(*BookApiError)
	return ret0, ret1
}

// FindOne indicates an expected call of FindOne
func (mr *MockServiceMockRecorder) FindOne(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindOne", reflect.TypeOf((*MockService)(nil).FindOne), id)
}

// Update mocks base method
func (m *MockService) Update(id string, book Book) *BookApiError {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", id, book)
	ret0, _ := ret[0].(*BookApiError)
	return ret0
}

// Update indicates an expected call of Update
func (mr *MockServiceMockRecorder) Update(id, book interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockService)(nil).Update), id, book)
}

// Delete mocks base method
func (m *MockService) Delete(id string) *BookApiError {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", id)
	ret0, _ := ret[0].(*BookApiError)
	return ret0
}

// Delete indicates an expected call of Delete
func (mr *MockServiceMockRecorder) Delete(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockService)(nil).Delete), id)
}

// CheckOut mocks base method
func (m *MockService) CheckOut(id string) *BookApiError {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckOut", id)
	ret0, _ := ret[0].(*BookApiError)
	return ret0
}

// CheckOut indicates an expected call of CheckOut
func (mr *MockServiceMockRecorder) CheckOut(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckOut", reflect.TypeOf((*MockService)(nil).CheckOut), id)
}

// CheckIn mocks base method
func (m *MockService) CheckIn(id string) *BookApiError {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckIn", id)
	ret0, _ := ret[0].(*BookApiError)
	return ret0
}

// CheckIn indicates an expected call of CheckIn
func (mr *MockServiceMockRecorder) CheckIn(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckIn", reflect.TypeOf((*MockService)(nil).CheckIn), id)
}

// Create mocks base method
func (m *MockService) Create(book Book) (string, *BookApiError) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", book)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(*BookApiError)
	return ret0, ret1
}

// Create indicates an expected call of Create
func (mr *MockServiceMockRecorder) Create(book interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockService)(nil).Create), book)
}

// Rate mocks base method
func (m *MockService) Rate(id string, rate int) *BookApiError {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Rate", id, rate)
	ret0, _ := ret[0].(*BookApiError)
	return ret0
}

// Rate indicates an expected call of Rate
func (mr *MockServiceMockRecorder) Rate(id, rate interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Rate", reflect.TypeOf((*MockService)(nil).Rate), id, rate)
}
